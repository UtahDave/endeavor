#!/usr/bin/python
#
# Copyright (c) 2013 Jesse Keating <jkeating@j2solutions.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# stravacmd -- a python command line tool for interfacing with Strava
#

import pystrava
import argparse
import logging
import sys

log = pystrava.log.log

def build_arg_dict(avail, args):
    # This is kind of unncessary magic that saves me from typing
    # a bunch of clubId=args.clubId for each arg...
    # Build up a dict of argument values from the available list
    argdict = dict((k, v) for (k, v) in [(k, getattr(args, k))
                                   for k in avail])
    return argdict

def rides_worker(args):
    # Create an athlete object out of the ID we got
    athlete = pystrava.athlete.StravaAthlete(args.athlete)
    availargs = ['clubId', 'startDate', 'endDate', 'startId']
    argdict = build_arg_dict(availargs, args)
    rides = athlete.get_all_rides(**argdict)
    for ride in rides:
        print('%(id)s %(name)s' % ride)

def main():
    # Build up an argument parser
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', action='store_true', help='verbose')
    parser.add_argument('-q', action='store_true', help='show no extra output')

    # Create a subparser
    subparsers = parser.add_subparsers(title='Targets',
                                       description='Valid commands')

    rides_parser = subparsers.add_parser('rides', 
                                         help='Work with Strava rides',
                                         description='Display strava rides')
    rides_parser.add_argument('--athlete',
                              help='List rides for a particular athlete',
                              required=True)
    rides_parser.add_argument('--club', dest='clubId',
                              help='List rides for a particular club')
    rides_parser.add_argument('--startdate', dest='startDate',
                              help='List rides starting from YYYY-MM-DD')
    rides_parser.add_argument('--enddate', dest='endDate',
                              help='List rides until YYYY-MM-DD')
    rides_parser.add_argument('--start', dest='startId',
                              help='List rides newer than (including) \
                              this ride number')
    rides_parser.set_defaults(command=rides_worker)

    # Parse the args
    ourargs = parser.parse_args()

    # Setup logging
    class StdoutFilter(logging.Filter):
        def filter(self, record):
            # If the record is 20 (INFO) or lower, let it through
            return record.levelno <= logging.INFO

    myfilter = StdoutFilter()
    formatter = logging.Formatter('%(message)s')
    stdouthandler = logging.StreamHandler(sys.stdout)
    stdouthandler.addFilter(myfilter)
    stdouthandler.setFormatter(formatter)
    stderrhandler = logging.StreamHandler() # Defaults to stderr
    stderrhandler.setLevel(logging.WARNING)
    stderrhandler.setFormatter(formatter)
    log.addHandler(stdouthandler)
    log.addHandler(stderrhandler)

    if ourargs.v:
        log.setLevel(logging.DEBUG)
    elif ourargs.q:
        log.setLevel(logging.WARNING)
    else:
        log.setLevel(logging.INFO)

    # Run the command we got from our arguments
    ourargs.command(ourargs)    

if __name__ == "__main__":
    main()